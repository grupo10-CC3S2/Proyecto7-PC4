diff --git a/.github/workflows/alexvega.yml b/.github/workflows/alexvega.yml
new file mode 100644
index 0000000..2c3ef87
--- /dev/null
+++ b/.github/workflows/alexvega.yml
@@ -0,0 +1,70 @@
+name: CI
+on: [push, pull_request]
+jobs:
+  job1:
+    runs-on: ubuntu-latest
+    name: build example and deploy to minikube
+    steps:
+    - uses: actions/checkout@v4
+
+    - name: Install requirements
+      run: |
+        sudo apt-get update
+        sudo apt-get install -y python3-pip
+        pip3 install -r requirements.txt
+
+    - name: Start minikube
+      uses: medyagh/setup-minikube@latest
+
+    - name: Build docker images
+      run: |
+        minikube image build -t timeserver:v5 app
+    
+    - run: kubectl get pods -A
+
+    - name: Build image
+      run: |
+        minikube image build -t local/devex:v1 .
+    - name: Deploy to minikube
+      run: kubectl apply -f k8s/
+
+    - run: sleep 10
+
+    - run: kubectl get pods -A
+
+    - name: Install metrics-server (with fix for Minikube)
+      run: |
+        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
+        kubectl patch deployment metrics-server -n kube-system \
+          --type='json' \
+          -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value":"--kubelet-insecure-tls"}]'
+
+    - name: Wait for metrics-server to be ready (max 60s)
+      run: |
+        for i in {1..12}; do
+          echo "Esperando metrics-server ($i/12)..."
+          ready=$(kubectl get pods -n kube-system | grep metrics-server | grep Running | grep '1/1' | wc -l)
+          if [ "$ready" -eq 1 ]; then
+            echo "metrics-server está listo"
+            break
+          fi
+          sleep 5
+        done
+
+    - run: sleep 15
+
+    - run: kubectl top pods 
+
+    - name: Verificar servicios levantado
+      run: kubectl get svc
+
+    - name: Esperar a que el servicio esté listo
+      run: |
+        for i in {1..10}; do
+          curl -s http://localhost:8080/health && break
+          echo "Esperando que el servicio esté listo..."
+          sleep 2
+        done
+    
+    - name: test unitarios, e2e, health
+      run: pytest
\ No newline at end of file
diff --git a/.github/workflows/christia.yml b/.github/workflows/christia.yml
index b5ac95e..b1091e3 100644
--- a/.github/workflows/christia.yml
+++ b/.github/workflows/christia.yml
@@ -18,7 +18,7 @@ jobs:
 
     - name: Build docker images
       run: |
-        minikube image build -t timeserver:v3 app
+        minikube image build -t timeserver:v5 app
     
     - name: Try the cluster!
       run: kubectl get pods -A
diff --git a/Makefile b/Makefile
index a1b9ba2..2b25d58 100644
--- a/Makefile
+++ b/Makefile
@@ -1,18 +1,30 @@
 REPO = "https://github.com/grupo10-CC3S2/Proyecto7-PC4"
 
-setup-v1:
-	docker build -t timeserver:v1 app
-	kubectl cluster-info
-	kubectl apply -f k8s/
-	kubectl get pods
+build-image:
+	docker build -t timeserver:v5 app
+
+setup-minikube:
+	minikube start --container-runtime=docker
+	minikube kubectl cluster-info
+	minikube kubectl -- apply -f k8s/
+	minikube kubectl get pods
+	minikube dashboard
 
-setup-v2:
-	docker build -t timeserver:v2 app
+clear-minikube:
+	minikube stop
+	minikube delete
+
+setup:
+	kubectl cluster-info
 	kubectl apply -f k8s/
 	kubectl get pods
+	kubectl get services
+clear:
+	kubectl delete all --all --namespace=default --force --grace-period=0
 
 teardown:
 	flux suspend kustomization kustomization-github
+	kubectl delete namespace flux-system
 	kubectl delete all --all --namespace=default --force --grace-period=0
 	docker image rm timeserver:v1
 	docker image rm timeserver:v2
@@ -41,4 +53,4 @@ flux-suspend:
 	flux suspend kustomization kustomization-github
 
 pod-images:
-	kubectl get pods --namespace=default -o json | jq '.items[].spec.containers[] | {pod: .name, container_name: .name, image: .image}'
\ No newline at end of file
+	kubectl get pods -n default -o custom-columns=POD:.metadata.name,IMAGE:.spec.containers[*].image
\ No newline at end of file
diff --git a/PC5-AlexVega/README.md b/PC5-AlexVega/README.md
new file mode 100644
index 0000000..1ebb0c9
--- /dev/null
+++ b/PC5-AlexVega/README.md
@@ -0,0 +1,62 @@
+## Recursos de K8s
+
+Los recursos de K8s permiten desplegar y gestionar los servicios de manera eficiente. La funcion de cada archivo es:
+
+1. **deploy.yaml**: En este manifest define los despliegues de las aplicaciones. Contiene especificaciones como replicas, contenedores, imagenes y configuraciones necesarias para que los pods funcionen correctamente con su version.
+
+2. **service.yaml**: Este manifest configura los servicios que exponen los pods al exterior o a otros servicios dentro del cluster. Define detalles como el tipo de servicio (ClusterIP, NodePort, LoadBalancer) y los puertos expuestos.
+
+3. **jaeger.yaml**: Este manifest configura Jaeger dentro del cluster de Kubernetes. Incluye los componentes necesarios para recolectar, procesar y visualizar trazas de las aplicaciones.
+
+## Trazabilidad con Jaeger
+
+Jaeger es una herramienta de trazabilidad distribuida que permite monitorear y depurar aplicaciones complejas. En este proyecto, se utiliza para rastrear las solicitudes que pasan a traves de los diferentes servicios desplegados en Kubernetes.
+
+### Configuracion de Jaeger
+
+El archivo `jaeger.yaml` incluye la configuracion necesaria para desplegar Jaeger en el cluster. Esto incluye:
+
+- **Agent**: Recolecta las trazas enviadas por las aplicaciones.
+- **Collector**: Procesa y almacena las trazas recolectadas.
+- **Query**: Proporciona una interfaz para consultar y visualizar las trazas.
+- **UI**: Una interfaz grafica para explorar las trazas y analizar el rendimiento de los servicios.
+
+### Integracion con las aplicaciones
+
+Para que las aplicaciones puedan enviar trazas a Jaeger, es necesario configurar un cliente de trazabilidad en el codigo de las aplicaciones. Esto incluye:
+
+- Especificar la direccion del agente de Jaeger.
+- Instrumentar el codigo para capturar las operaciones relevantes.
+
+### Setup
+
+En directorio raiz:
+
+```sh
+make build-image
+make setup
+```
+
+Estos comandos de Makefile construyen la imagen de Docker para la aplicacion y despliegan los recursos de Kubernetes necesarios.
+
+Estos recursos desplegaran la app de Flask y la UI de Jaeger en los suientes puertos:
+
+```sh
+http://localhost:30686  # UI de Jaeger
+http://localhost:8080  # App de Flask
+```
+
+Al ir al panel de UI de Jaeger se podran observar las trazas:
+![jaeger_ui](jaeger_ui.png)
+![error](error.png)
+
+Despues en directorio raiz, se puede usar el script para realizar requests:
+```sh
+bash ./scripts/stress_test.sh
+```
+
+Para teardown de recursos de Kubernetes:
+
+```sh
+make clear
+```
\ No newline at end of file
diff --git a/PC5-AlexVega/error.png b/PC5-AlexVega/error.png
new file mode 100644
index 0000000..3efda56
Binary files /dev/null and b/PC5-AlexVega/error.png differ
diff --git a/PC5-AlexVega/jaeger_ui.png b/PC5-AlexVega/jaeger_ui.png
new file mode 100644
index 0000000..01a58f8
Binary files /dev/null and b/PC5-AlexVega/jaeger_ui.png differ
diff --git a/README.md b/README.md
index a2d2382..9b5fd6c 100644
--- a/README.md
+++ b/README.md
@@ -11,8 +11,7 @@
 
 1. Construir la imagen Docker local:
    ```sh
-   docker build -t timeserver:v1 app
-   docker build -t timeserver:v2 app
+   docker build -t timeserver:v5 app
    ```
 2. Verificar que Kubernetes esta activado:
    ```sh
@@ -53,4 +52,6 @@ Para borrar todo lo creado y liberar recursos:
 2. Eliminar la imagen (esperar unos segundos):
    ```sh
    docker image rm timeserver
-   ```
\ No newline at end of file
+   ```
+
+Editando 2
\ No newline at end of file
diff --git a/app/Dockerfile b/app/Dockerfile
index 2b6457b..baad405 100644
--- a/app/Dockerfile
+++ b/app/Dockerfile
@@ -2,5 +2,5 @@ FROM python:3.12
 ENV PYTHONUNBUFFERED 1
 COPY . /app
 WORKDIR /app
-RUN pip install flask tzdata
+RUN pip install -r requirements.txt
 CMD python3 server.py
\ No newline at end of file
diff --git a/app/requirements.txt b/app/requirements.txt
new file mode 100644
index 0000000..74bc59b
--- /dev/null
+++ b/app/requirements.txt
@@ -0,0 +1,7 @@
+flask
+opentelemetry-api
+opentelemetry-sdk
+opentelemetry-instrumentation-flask
+opentelemetry-instrumentation-logging
+opentelemetry-exporter-otlp-proto-http
+tzdata
diff --git a/app/server.py b/app/server.py
index c06fb6b..2a61ea5 100644
--- a/app/server.py
+++ b/app/server.py
@@ -1,28 +1,84 @@
-from flask import Flask, Response, jsonify
+from flask import Flask, Response, jsonify, request
 from datetime import datetime, timezone
 from zoneinfo import ZoneInfo
 from logger_service import start_background_logging, logger
+from tracing_config import setup_tracing
+import logging
+from opentelemetry import trace
 
 
 app = Flask(__name__)
 
+tracer, meter = setup_tracing(app)
+
+request_counter = meter.create_counter(
+    "time.requests",
+    description="Numero de requests por endpoint",
+)
+
 LIMA_TZ = ZoneInfo("America/Lima")
+logging.basicConfig(level=logging.INFO)
+app_logger = logging.getLogger(__name__)
 
 
 @app.route("/")
 def get_current_time():
-    now = datetime.now(timezone.utc)
-    now_lima = now.astimezone(LIMA_TZ)
+    with tracer.start_as_current_span("get_current_time_operation") as time_span:
+        timezone_param = request.args.get("timezone", default="lima", type=str)
+
+        with tracer.start_as_current_span("calculate_time"):
+            now = datetime.now(timezone.utc)
+            now_lima = now.astimezone(LIMA_TZ)
+
+            time_span.set_attribute("request.timezone", timezone_param)
+            time_span.set_attribute("time.utc", now.isoformat())
+            time_span.set_attribute("time.lima", now_lima.isoformat())
 
-    response_string = now.strftime("La hora es %I:%M %p, UTC.\n")
-    response_string += now_lima.strftime("La hora en Lima es %I:%M %p.\n")
-    return Response(response_string, mimetype='text/plain')
+        # para contar las GET requests
+        request_counter.add(1, {"endpoint": "/", "timezone": timezone_param})
+
+        with tracer.start_as_current_span("format_response"):
+            response_string = now.strftime("La hora es %I:%M %p, UTC.\n")
+            response_string += now_lima.strftime("La hora en Lima es %I:%M %p.\n")
+
+            app_logger.info(f"Time request for timezone: {timezone_param}")
+
+        return Response(response_string, mimetype='text/plain')
 
 
 @app.route("/health")
 def health_check():
-    return jsonify({"status": "ok"})
+    with tracer.start_as_current_span("health_check_operation") as health_span:
+        request_counter.add(1, {"endpoint": "/health"})
+
+        with tracer.start_as_current_span("verify_health"):
+            status = "ok"
+            health_span.set_attribute("health.status", status)
+            app_logger.info("Health check performed")
+
+        return jsonify({"status": status})
+
+
+
+# Se agrega esta ruta para verificar trazas de error en Jaeger
+
+@app.route("/error")
+def trigger_error():
+    with tracer.start_as_current_span("trigger_error_operation") as error_span:
+        try:
+            result = 1 / 0
+        except Exception as e:
+            app_logger.error(f"Se ha producido un error deliberado: {e}", exc_info=True)
+
+            error_span.set_status(trace.Status(trace.StatusCode.ERROR, "division por cero?"))
+            error_span.record_exception(e)
+
+            response = jsonify({"status": "error", "message": "error interno!"})
+            response.status_code = 500
+
+            request_counter.add(1, {"endpoint": "/error", "status": "error"})
 
+            return response
 
 if __name__ == "__main__":
     start_background_logging()
diff --git a/app/tracing_config.py b/app/tracing_config.py
new file mode 100644
index 0000000..9f1a1db
--- /dev/null
+++ b/app/tracing_config.py
@@ -0,0 +1,45 @@
+from opentelemetry.instrumentation.flask import FlaskInstrumentor
+from opentelemetry.instrumentation.logging import LoggingInstrumentor
+from opentelemetry import trace, metrics
+from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
+from opentelemetry.sdk.trace import TracerProvider
+from opentelemetry.sdk.trace.export import BatchSpanProcessor
+from opentelemetry.sdk.metrics import MeterProvider
+from opentelemetry.sdk.metrics.export import ConsoleMetricExporter, PeriodicExportingMetricReader
+from opentelemetry.sdk.resources import Resource
+import os
+
+
+def setup_tracing(app):
+    # recurso que aparecera en panel de Jaeger
+    resource = Resource(attributes={
+        "service.name": "timeserver-app"
+    })
+
+    # setea el proveedor de trazas con el recurso
+    trace.set_tracer_provider(TracerProvider(resource=resource))
+
+    jaeger_host = os.getenv("JAEGER_HOST", "jaeger-collector")
+    jaeger_port = os.getenv("JAEGER_PORT", "4318")
+
+    otlp_exporter = OTLPSpanExporter(
+        endpoint=f"http://{jaeger_host}:{jaeger_port}/v1/traces"
+    )
+    span_processor = BatchSpanProcessor(otlp_exporter)
+    trace.get_tracer_provider().add_span_processor(span_processor)
+
+    # config de métricas
+    metric_reader = PeriodicExportingMetricReader(
+        exporter=ConsoleMetricExporter(),
+        export_interval_millis=5000,
+    )
+    metrics.set_meter_provider(MeterProvider(resource=resource, metric_readers=[metric_reader]))
+
+    # clases de instrumentacion para facil setup de flask y logging
+    FlaskInstrumentor().instrument_app(app)
+    LoggingInstrumentor().instrument(set_logging_format=True)
+
+    tracer = trace.get_tracer("timeservice.tracer")
+    meter = metrics.get_meter("timeservice.meter")
+
+    return tracer, meter
\ No newline at end of file
diff --git a/k8s/deploy.yaml b/k8s/deploy.yaml
index e19f372..e0667b1 100644
--- a/k8s/deploy.yaml
+++ b/k8s/deploy.yaml
@@ -15,5 +15,10 @@ spec:
     spec:
       containers:
       - name: timeserver-container
-        image: timeserver:v3
-        imagePullPolicy: Never
\ No newline at end of file
+        image: timeserver:v5
+        imagePullPolicy: Never
+        env:
+        - name: JAEGER_HOST
+          value: "jaeger-collector"
+        ports:
+        - containerPort: 80
\ No newline at end of file
diff --git a/k8s/jaegger.yaml b/k8s/jaegger.yaml
new file mode 100644
index 0000000..0286416
--- /dev/null
+++ b/k8s/jaegger.yaml
@@ -0,0 +1,22 @@
+apiVersion: apps/v1
+kind: Deployment
+metadata:
+  name: jaeger
+  namespace: default
+spec:
+  replicas: 1
+  selector:
+    matchLabels:
+      app: jaeger
+  template:
+    metadata:
+      labels:
+        app: jaeger
+    spec:
+      containers:
+      - name: jaeger-instance
+        image: jaegertracing/all-in-one:latest
+        ports:
+        - containerPort: 4318 # OTLP HTTP
+        - containerPort: 16686 # UI
+        - containerPort: 14268
\ No newline at end of file
diff --git a/k8s/service.yaml b/k8s/service.yaml
index 36e2a95..60fa4a3 100644
--- a/k8s/service.yaml
+++ b/k8s/service.yaml
@@ -4,10 +4,48 @@ metadata:
   name: timeserver
   namespace: default
 spec:
+  type: LoadBalancer # Cambiado de NodePort a LoadBalancer
   selector:
     pod: timeserver-pod
   ports:
-  - port: 8080
-    targetPort: 80
+  - name: http-8080
+    port: 8080      # Puerto expuesto por el LoadBalancer
+    targetPort: 80  # Puerto del contenedor
     protocol: TCP
-  type: LoadBalancer
\ No newline at end of file
+
+---
+
+# Servicio para la UI de Jaeger
+apiVersion: v1
+kind: Service
+metadata:
+  name: jaeger-ui
+  namespace: default
+spec:
+  type: NodePort 
+  selector:
+    app: jaeger
+  ports:
+  - port: 16686         # puerto interno de la UI
+    targetPort: 16686   # puerto del contenedor de Jaeger
+    nodePort: 30686     # puerto en localhost de maquina local
+    protocol: TCP
+    name: ui-port
+
+---
+
+# Servicio para el colector de Jaeger
+apiVersion: v1
+kind: Service
+metadata:
+  name: jaeger-collector
+  namespace: default
+spec:
+  type: ClusterIP # comunicacion interna
+  selector:
+    app: jaeger
+  ports:
+  - port: 4318
+    targetPort: 4318
+    protocol: TCP
+    name: otlp-http
\ No newline at end of file
diff --git a/scripts/stress_test.sh b/scripts/stress_test.sh
new file mode 100644
index 0000000..62637f4
--- /dev/null
+++ b/scripts/stress_test.sh
@@ -0,0 +1,35 @@
+#!/usr/bin/env bash
+
+BASE_URL="http://localhost:8080"
+TOTAL_REQUESTS=100
+
+for i in $(seq 1 $TOTAL_REQUESTS); do
+
+    # se obtiene tipo de request y tiempo de espera aleatorio
+    request_type=$(( ( RANDOM % 4 ) + 1 ))
+    sleep_time_ms=$(( ( RANDOM % 500 ) + 100 ))
+
+    echo -n "request #$i: "
+
+    # se hacen requests a distintas rutas
+    case $request_type in
+        [1])
+        echo "OK -> GET /"
+        curl -s -o /dev/null "$BASE_URL/"
+        ;;
+        [2])
+        echo "OK -> GET /health"
+        curl -s -o /dev/null "$BASE_URL/health"
+        ;;
+        [3])
+        echo "SERVER_ERROR -> GET /error"
+        curl -s -o /dev/null "$BASE_URL/error"
+        ;;
+        [4])
+        echo "BAD_REQUEST -> GET /no"
+        curl -s -o /dev/null "$BASE_URL/no"
+        ;;
+    esac
+
+    sleep "0.${sleep_time_ms}"
+done
\ No newline at end of file
